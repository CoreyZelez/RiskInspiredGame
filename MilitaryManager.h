#pragma once
#include <vector>
#include <memory>
#include <set>
#include <SFML/Graphics.hpp>
#include "LandArmy.h"
#include "NavalFleet.h"

class Player;
class Territory;
class LandArmy;
class NavalFleet;

class MilitaryManager
{
public:
	MilitaryManager(Player &player);

	void handleGameOver();

	void draw(sf::RenderWindow &window) const;

	void update();

	// Returns pointer to military force at specified world position.
	MilitaryForce* getMilitary(sf::Vector2f position);

	// Removes specified percent of army reserves.
	void removeArmyReserves(double percentRemoved);

	// Returns percentage of troops generated by estates which are to reinforce existing armies.
	float getArmyReinforcementRate() const;
	void addArmyReinforcements(double amount);
	void addArmyReserves(double amount);

	// Returns percentage of troops generated by estates which are to reinforce existing armies.
	float getFleetReinforcementRate() const;
	void addFleetReinforcements(double amount);
	void addFleetReserves(double amount);

	// Returns army at territory.
	LandArmy *getArmy(const Territory *territory);
	// Returns fleet at territory.
	NavalFleet *getFleet(const Territory *territory);
	const std::vector<std::unique_ptr<LandArmy>> &getArmies() const;
	std::vector<std::unique_ptr<LandArmy>> &getArmies();
	const std::vector<std::unique_ptr<NavalFleet>> &getFleets() const;
	std::vector<std::unique_ptr<NavalFleet>> &getFleets();

	// Returns the total strength of all armies. Specify activeOnly to include only armies on map.
	int getTotalArmyStrength(bool activeOnly) const;
	// Returns strength of army reserves.
	int getArmyReserves() const;
	// Returns strength of fleet reserves.
	int getFleetReserves() const;
	// Returns strength of army reinforcements.
	int getArmyReinforcements() const;
	// Returns strength of fleet reinforcements.
	int getFleetReinforcements() const;
	// Returns the total strength of all fleets. Specify activeOnly to include only fleets on map.
	int getTotalFleetStrength(bool activeOnly) const;
	// Returns total army strength for stamina >= minStamina.
	int getTotalArmyStrength(int minStamina) const;
	// Returns total fleet strength for stamina >= minStamina.
	int getTotalFleetStrength(int minStamina) const;
	

	void addLandArmy(std::unique_ptr<LandArmy> army);
	void addNavalFleet(std::unique_ptr<NavalFleet> fleet);

private:
	Player &player;
	// Holds handle to every army and navy in manager.
	std::set<MilitaryForce*> militaries;  
	std::vector<std::unique_ptr<LandArmy>> armies;  
	std::vector<std::unique_ptr<NavalFleet>> fleets;

	// Army strength to reinforce active armies.
	double armyReinforcements = 0;  
	// Army strength held in reserve for various possible actions.
	double armyReserves = 0;
	// Fleets strength to reinforce active fleets.
	double fleetReinforcements = 0;
	// Fleet strength held in reserve for various possible actions.
	double fleetReserves = 0;

	void updateSieges();

	void removeDeadMilitaries();
	void resetStaminas();

	// Distributes army reinforcements to preexisting armies proportionate to strength.
	void distributeArmyReinforcements();
	// Distributes fleet reinforcements to preexisting fleets proportionate to strength.
	void distributeFleetReinforcements();
	// Reduces army and fleet reserves by some factor.
	void applyReservesReduction();
};

